const { EmbedBuilder, AttachmentBuilder } = require('discord.js');
const axios = require('axios');

const BASE_API_URL = 'https://nhentai.net/api';
const CDN_SERVERS = ['i3.nhentai.net', 'i7.nhentai.net', 'i5.nhentai.net'];
const THUMBNAIL_SERVERS = ['t3.nhentai.net', 't7.nhentai.net', 't5.nhentai.net'];

// –ö–µ—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–∞–ª–µ—Ä–µ–π
async function getRandomId() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
    const randomPage = Math.floor(Math.random() * 100) + 1;
    const { data } = await axios.get(`${BASE_API_URL}/galleries/all?page=${randomPage}`, {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });

    if (data.result && data.result.length > 0) {
      const randomIndex = Math.floor(Math.random() * data.result.length);
      return data.result[randomIndex].id;
    }
  } catch (err) {
    console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
  }
  
  // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
  return Math.floor(Math.random() * 400000) + 1;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function fetchGalleryData(id) {
  const cacheKey = `gallery_${id}`;
  const cached = cache.get(cacheKey);
  
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ ${id}`);
    return cached.data;
  }

  const apiUrl = `${BASE_API_URL}/gallery/${id}`;
  console.log('–ó–∞–ø—Ä–æ—Å –∫ API:', apiUrl);
  
  const { data } = await axios.get(apiUrl, {
    timeout: 10000,
    headers: {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
      'Accept': 'application/json'
    }
  });

  cache.set(cacheKey, { data, timestamp: Date.now() });
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞
  if (cache.size > 100) {
    const oldestKey = cache.keys().next().value;
    cache.delete(oldestKey);
  }

  return data;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö CDN
async function downloadImage(mediaId, page, imageType, ext, isCover = false) {
  const servers = isCover ? THUMBNAIL_SERVERS : CDN_SERVERS;
  
  for (const server of servers) {
    try {
      let imageUrl;
      if (isCover) {
        imageUrl = `https://${server}/galleries/${mediaId}/cover.${ext}`;
      } else {
        imageUrl = `https://${server}/galleries/${mediaId}/${page}.${ext}`;
      }

      console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', imageUrl);

      const { data } = await axios.get(imageUrl, {
        responseType: 'arraybuffer',
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Referer': 'https://nhentai.net/'
        }
      });

      const buffer = Buffer.from(data);
      if (buffer.length > 0) {
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        return buffer;
      }
    } catch (err) {
      console.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å ${server}:`, err.message);
      continue;
    }
  }

  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ CDN');
}

async function fetchDoujin(rawId, page = 1, infoOnly = false) {
  const id = Number(rawId);
  if (!Number.isInteger(id) || id < 1) {
    console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:', rawId);
    return null;
  }

  try {
    const doujin = await fetchGalleryData(id);

    if (!doujin) {
      console.log('–ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return null;
    }

    const title = doujin.title?.english
      || doujin.title?.japanese
      || doujin.title?.pretty
      || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

    const totalPages = doujin.images?.pages?.length || 0;
    if (totalPages === 0) return null;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (page > totalPages) page = totalPages;
    if (page < 1) page = 1;

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (infoOnly) {
      const tags = {
        artists: doujin.tags?.filter(t => t.type === 'artist').map(t => t.name) || [],
        parodies: doujin.tags?.filter(t => t.type === 'parody').map(t => t.name) || [],
        characters: doujin.tags?.filter(t => t.type === 'character').map(t => t.name) || [],
        tags: doujin.tags?.filter(t => t.type === 'tag').map(t => t.name) || [],
        languages: doujin.tags?.filter(t => t.type === 'language').map(t => t.name) || [],
        categories: doujin.tags?.filter(t => t.type === 'category').map(t => t.name) || []
      };

      const infoEmbed = new EmbedBuilder()
        .setTitle(title)
        .setURL(`https://nhentai.net/g/${id}`)
        .setColor(0xff006f)
        .setThumbnail(`https://t3.nhentai.net/galleries/${doujin.media_id}/thumb.jpg`)
        .addFields(
          { name: 'üìä ID', value: `\`${id}\``, inline: true },
          { name: 'üìÑ –°—Ç—Ä–∞–Ω–∏—Ü', value: `${totalPages}`, inline: true },
          { name: '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', value: `${doujin.num_favorites || 0}`, inline: true }
        );

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
      if (tags.artists.length > 0) {
        const artistsStr = tags.artists.join(', ');
        if (artistsStr.trim().length > 0) {
          infoEmbed.addFields({ 
            name: 'üé® –•—É–¥–æ–∂–Ω–∏–∫–∏', 
            value: artistsStr.length > 1024 ? artistsStr.substring(0, 1021) + '...' : artistsStr, 
            inline: false 
          });
        }
      }
      
      if (tags.parodies.length > 0) {
        const parodiesStr = tags.parodies.join(', ');
        if (parodiesStr.trim().length > 0) {
          infoEmbed.addFields({ 
            name: 'üì∫ –ü–∞—Ä–æ–¥–∏–∏', 
            value: parodiesStr.length > 1024 ? parodiesStr.substring(0, 1021) + '...' : parodiesStr, 
            inline: false 
          });
        }
      }
      
      if (tags.characters.length > 0) {
        const charsStr = tags.characters.join(', ');
        if (charsStr.trim().length > 0) {
          infoEmbed.addFields({ 
            name: 'üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏', 
            value: charsStr.length > 1024 ? charsStr.substring(0, 1021) + '...' : charsStr, 
            inline: false 
          });
        }
      }
      
      if (tags.languages.length > 0) {
        const langsStr = tags.languages.join(', ');
        if (langsStr.trim().length > 0) {
          infoEmbed.addFields({ name: 'üåê –Ø–∑—ã–∫–∏', value: langsStr, inline: true });
        }
      }
      
      if (tags.categories.length > 0) {
        const catsStr = tags.categories.join(', ');
        if (catsStr.trim().length > 0) {
          infoEmbed.addFields({ name: 'üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', value: catsStr, inline: true });
        }
      }
      
      if (tags.tags.length > 0) {
        const tagsStr = tags.tags.join(', ');
        if (tagsStr.trim().length > 0) {
          infoEmbed.addFields({ 
            name: 'üè∑Ô∏è –¢–µ–≥–∏', 
            value: tagsStr.length > 1024 ? tagsStr.substring(0, 1021) + '...' : tagsStr, 
            inline: false 
          });
        }
      }

      infoEmbed.setFooter({ text: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${new Date(doujin.upload_date * 1000).toLocaleDateString('ru-RU')}` });

      return { infoEmbed };
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const mediaId = doujin.media_id;
    let imageData;
    
    if (page === 1) {
      imageData = doujin.images.cover;
    } else {
      imageData = doujin.images.pages[page - 1];
    }

    if (!imageData) {
      console.log('–î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return null;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const typeMap = {
      'j': 'jpg',
      'p': 'png',
      'g': 'gif',
      'w': 'webp'
    };
    const ext = typeMap[imageData.t] || 'jpg';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const buffer = await downloadImage(mediaId, page, imageData.t, ext, page === 1);

    const filename = `page_${page}.${ext}`;
    const attachment = new AttachmentBuilder(buffer, { name: filename });

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏
    const allTags = doujin.tags?.map(t => t.name).join(', ') || '–ù–µ—Ç';
    const langTag = doujin.tags?.find(t => t.type === 'language');
    const language = langTag ? langTag.name : 'unknown';

    const embed = new EmbedBuilder()
      .setTitle(title.length > 256 ? title.substring(0, 253) + '...' : title)
      .setURL(`https://nhentai.net/g/${id}/${page}`)
      .setImage(`attachment://${filename}`)
      .setColor(0xff006f)
      .addFields(
        { name: 'üÜî ID', value: `\`${id}\``, inline: true },
        { name: 'üåê –Ø–∑—ã–∫', value: language, inline: true },
        { name: 'üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞', value: `${page}/${totalPages}`, inline: true }
      )
      .setFooter({ text: `‚ù§Ô∏è ${doujin.num_favorites || 0} ‚Ä¢ ${new Date(doujin.upload_date * 1000).toLocaleDateString('ru-RU')}` });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
    if (allTags.length <= 1024) {
      embed.addFields({ name: 'üè∑Ô∏è –¢–µ–≥–∏', value: allTags, inline: false });
    }

    return { embed, attachment, totalPages };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ fetchDoujin:', err.message);
    if (err.response?.status === 404) {
      console.log('–ì–∞–ª–µ—Ä–µ—è 404 - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    return null;
  }
}

async function searchDoujin(tag, sort = 'random') {
  try {
    console.log('–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É:', tag, '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', sort);
    
    const searchUrl = `${BASE_API_URL}/galleries/search?query=tag:"${encodeURIComponent(tag)}"`;
    console.log('URL –ø–æ–∏—Å–∫–∞:', searchUrl);
    
    const { data } = await axios.get(searchUrl, {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API');
    
    if (!data || !data.result || data.result.length === 0) {
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç—ã');
      return null;
    }

    console.log('–ù–∞–π–¥–µ–Ω–æ –≥–∞–ª–µ—Ä–µ–π:', data.result.length);
    
    let selectedDoujin;
    
    switch (sort) {
      case 'popular':
        // –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è (–ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É)
        selectedDoujin = data.result.reduce((prev, current) => 
          (prev.num_favorites > current.num_favorites) ? prev : current
        );
        break;
        
      case 'recent':
        // –°–∞–º–∞—è —Å–≤–µ–∂–∞—è
        selectedDoujin = data.result[0];
        break;
        
      case 'random':
      default:
        // –°–ª—É—á–∞–π–Ω–∞—è
        const randomIndex = Math.floor(Math.random() * Math.min(data.result.length, 25));
        selectedDoujin = data.result[randomIndex];
        break;
    }
    
    console.log('–í—ã–±—Ä–∞–Ω–∞ –≥–∞–ª–µ—Ä–µ—è —Å ID:', selectedDoujin.id);
    
    return { id: parseInt(selectedDoujin.id) };
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ searchDoujin:', err.message);
    return null;
  }
}

module.exports = { fetchDoujin, searchDoujin, getRandomId };